"""
–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞—Ç–µ—Ä–Ω—É "–°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á" (Observer) –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –ø–æ—è–≤—É —Ç–æ–≤–∞—Ä—É.
"""

from abc import ABC, abstractmethod


class Subject(ABC):
    """–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –°—É–±'—î–∫—Ç."""

    @abstractmethod
    def attach(self, observer):
        """–ü—ñ–¥–ø–∏—Å–∞—Ç–∏ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞."""

    @abstractmethod
    def detach(self, observer):
        """–í—ñ–¥–ø–∏—Å–∞—Ç–∏ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞."""

    @abstractmethod
    def notify(self):
        """–°–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –≤—Å—ñ—Ö –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á—ñ–≤."""


class Observer(ABC):
    """–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á."""

    @abstractmethod
    def update(self, product):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É."""


class Product(Subject):
    """–¢–æ–≤–∞—Ä, —è–∫–∏–π –º–æ–∂–µ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á—ñ–≤."""

    def __init__(self, name: str, quantity: int = 0):
        self.name = name
        self.quantity = quantity
        self._observers = []

    def attach(self, observer: Observer):
        if observer not in self._observers:
            self._observers.append(observer)

    def detach(self, observer: Observer):
        if observer in self._observers:
            self._observers.remove(observer)

    def notify(self):
        for observer in self._observers:
            observer.update(self)

    def set_quantity(self, new_quantity: int):
        """–û–Ω–æ–≤–ª—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É. –Ø–∫—â–æ –≤—ñ–Ω –∑–Ω–æ–≤—É –∑‚Äô—è–≤–∏–≤—Å—è ‚Äî —Å–ø–æ–≤—ñ—â–∞—î –∫–ª—ñ—î–Ω—Ç—ñ–≤."""
        was_out_of_stock = self.quantity == 0
        self.quantity = new_quantity

        if was_out_of_stock and self.quantity > 0:
            self.notify()


class Customer(Observer):
    """–ö–ª—ñ—î–Ω—Ç, —è–∫–∏–π –æ—Ç—Ä–∏–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏."""

    def __init__(self, name: str, email: str):
        self.name = name
        self.email = email

    def update(self, product: Product):
        print(
            f"–ü—Ä–∏–≤—ñ—Ç, {self.name}! –¢–æ–≤–∞—Ä '{product.name}' –∑–Ω–æ–≤—É –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ "
            f"({product.quantity} —à—Ç). –ü–æ—Å–ø—ñ—à–∞–π—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!"
        )


# --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è ---
def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –ø–∞—Ç–µ—Ä–Ω—É –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á."""
    phone = Product("–°–º–∞—Ä—Ç—Ñ–æ–Ω", 0)
    laptop = Product("–ù–æ—É—Ç–±—É–∫", 0)

    alice = Customer("–ê–ª—ñ—Å–∞", "alice@example.com")
    bob = Customer("–ë–æ–±", "bob@example.com")
    charlie = Customer("–ß–∞—Ä–ª—ñ", "charlie@example.com")

    phone.attach(alice)
    phone.attach(bob)
    laptop.attach(charlie)
    laptop.attach(bob)

    print("\nüì¶ –°–º–∞—Ä—Ç—Ñ–æ–Ω –ø–æ–ø–æ–≤–Ω–µ–Ω–æ:")
    phone.set_quantity(10)

    print("\nüì¶ –ù–æ—É—Ç–±—É–∫ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ:")
    laptop.set_quantity(5)

    print("\n‚ùå –ë–æ–± –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –Ω–æ—É—Ç–±—É–∫")
    laptop.detach(bob)

    print("\nüì¶ –ù–æ—É—Ç–±—É–∫ –∑–Ω–æ–≤—É –ø–æ–ø–æ–≤–Ω–µ–Ω–æ:")
    laptop.set_quantity(3)


if __name__ == "__main__":
    main()
